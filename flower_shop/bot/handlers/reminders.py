"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""
import logging
import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import os

logger = logging.getLogger(__name__)
router = Router()

API_URL = os.getenv('API_URL', 'http://localhost:8000')

class ReminderStates(StatesGroup):
    waiting_for_event_name = State()
    waiting_for_event_date = State()
    waiting_for_remind_days = State()

async def get_user_reminders(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/reminders/{telegram_id}") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

async def create_reminder(telegram_id: int, event_name: str, event_date: str, remind_days: int):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/api/reminders", json={
                "telegram_id": telegram_id,
                "event_name": event_name,
                "event_date": event_date,
                "remind_days_before": remind_days
            }) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

@router.message(F.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    logger.info(f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç {message.from_user.id}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")],
        [InlineKeyboardButton(text="üìù –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="list_reminders")]
    ])
    
    await message.answer(
        "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö</b>\n\n"
        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è, –≥–æ–¥–æ–≤—â–∏–Ω–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö!\n"
        "–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –≤—ã —É—Å–ø–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç.",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@router.callback_query(F.data == "add_reminder")
async def add_reminder_start(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.set_state(ReminderStates.waiting_for_event_name)
    
    await callback_query.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã, –ì–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã, 8 –º–∞—Ä—Ç–∞",
        parse_mode='HTML'
    )
    
    await callback_query.answer()

@router.message(ReminderStates.waiting_for_event_name)
async def process_event_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    event_name = message.text.strip()
    
    if len(event_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(event_name=event_name)
    await state.set_state(ReminderStates.waiting_for_event_date)
    
    await message.answer(
        f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
        f"–°–æ–±—ã—Ç–∏–µ: {event_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2025",
        parse_mode='HTML'
    )

@router.message(ReminderStates.waiting_for_event_date)
async def process_event_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è"""
    date_text = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        day, month, year = date_text.split('.')
        event_date = datetime(int(year), int(month), int(day))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if event_date <= datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    await state.update_data(event_date=date_text)
    await state.set_state(ReminderStates.waiting_for_remind_days)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="remind_1")],
        [InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="remind_3")],
        [InlineKeyboardButton(text="7 –¥–Ω–µ–π", callback_data="remind_7")],
        [InlineKeyboardButton(text="14 –¥–Ω–µ–π", callback_data="remind_14")]
    ])
    
    await message.answer(
        f"‚è∞ <b>–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å?</b>\n\n"
        f"–°–æ–±—ã—Ç–∏–µ: {event_date.strftime('%d.%m.%Y')}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("remind_"))
async def process_remind_days(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    remind_days = int(callback_query.data.replace("remind_", ""))
    
    data = await state.get_data()
    event_name = data['event_name']
    event_date = data['event_date']
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    result = await create_reminder(
        callback_query.from_user.id,
        event_name,
        event_date,
        remind_days
    )
    
    if result:
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üìù –°–æ–±—ã—Ç–∏–µ: {event_name}\n"
            f"üìÖ –î–∞—Ç–∞: {event_date}\n"
            f"‚è∞ –ù–∞–ø–æ–º–Ω–∏–º –∑–∞ {remind_days} –¥–Ω–µ–π\n\n"
            f"–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –≤—ã —É—Å–ø–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç!",
            parse_mode='HTML'
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
    
    await state.clear()
    await callback_query.answer()

@router.callback_query(F.data == "list_reminders")
async def list_reminders(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminders = await get_user_reminders(callback_query.from_user.id)
    
    if not reminders:
        await callback_query.message.edit_text(
            "üìù <b>–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
            parse_mode='HTML'
        )
        await callback_query.answer()
        return
    
    text = "üìù <b>–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
    
    for reminder in reminders:
        text += f"üìÖ <b>{reminder['event_name']}</b>\n"
        text += f"–î–∞—Ç–∞: {reminder['event_date']}\n"
        text += f"–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞: {reminder['remind_days_before']} –¥–Ω–µ–π\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_reminder")]
    ])
    
    await callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback_query.answer()

