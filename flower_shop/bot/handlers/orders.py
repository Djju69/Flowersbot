"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
"""
import logging
import aiohttp
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import os

logger = logging.getLogger(__name__)
router = Router()

API_URL = os.getenv('API_URL', 'http://localhost:8000')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://flowersbot-production.up.railway.app/webapp')

async def get_user_orders(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/orders/{telegram_id}") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: Message):
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üì¶ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç {message.from_user.id}")
    
    orders = await get_user_orders(message.from_user.id)
    
    if not orders:
        await message.answer(
            "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
            parse_mode='HTML'
        )
        return
    
    text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    
    for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        status_emoji = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'making': 'üå∏',
            'delivering': 'üöö',
            'delivered': 'üéâ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')
        
        text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
        text += f"üí∞ {order['total']:,} VND\n"
        text += f"üìÖ {order['delivery_date']} –≤ {order['delivery_time']}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
    
    if len(orders) > 5:
        text += f"... –∏ –µ—â–µ {len(orders) - 5} –∑–∞–∫–∞–∑–æ–≤"
    
    await message.answer(text, parse_mode='HTML')

@router.message(F.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_last_order(message: Message):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑"""
    logger.info(f"üîÅ –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç {message.from_user.id}")
    
    orders = await get_user_orders(message.from_user.id)
    
    if not orders:
        await message.answer(
            "üîÅ <b>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
            parse_mode='HTML'
        )
        return
    
    last_order = orders[0]  # –°–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üõç –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ #{last_order['id']}",
            web_app=WebAppInfo(url=f"{WEBAPP_URL}?repeat={last_order['id']}")
        )]
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    items_text = ""
    for item in last_order['items']:
        items_text += f"‚Ä¢ {item['product_name']} ({item['size']}) x{item['quantity']}\n"
    
    await message.answer(
        f"üîÅ <b>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑</b>\n\n"
        f"üì¶ –ó–∞–∫–∞–∑ #{last_order['id']}\n"
        f"üí∞ {last_order['total']:,} VND\n\n"
        f"<b>–¢–æ–≤–∞—Ä—ã:</b>\n{items_text}\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("repeat_order_"))
async def repeat_specific_order(callback_query):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑"""
    order_id = callback_query.data.replace("repeat_order_", "")
    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç {callback_query.from_user.id}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üõç –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}",
            web_app=WebAppInfo(url=f"{WEBAPP_URL}?repeat={order_id}")
        )]
    ])
    
    await callback_query.message.edit_text(
        f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback_query.answer()

