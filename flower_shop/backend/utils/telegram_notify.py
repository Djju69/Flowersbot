"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""
import aiohttp
import os
import logging

logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

async def send_telegram_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_order_notification(order_id: int, order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ"""
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = f"""üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['name']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data['phone']}
üìç <b>–ê–¥—Ä–µ—Å:</b> {order_data['address']}
üìÖ <b>–î–∞—Ç–∞:</b> {order_data['delivery_date']}
‚è∞ <b>–í—Ä–µ–º—è:</b> {order_data['delivery_time']}

üí∞ <b>–°—É–º–º–∞:</b> {order_data['total']:,} VND

<b>–¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for item in order_data['items']:
        admin_text += f"‚Ä¢ {item['product_name']} ({item['size']}) x{item['quantity']} - {item['price']:,} VND\n"
    
    if order_data.get('card_text'):
        admin_text += f"\nüíå <b>–û—Ç–∫—Ä—ã—Ç–∫–∞:</b> {order_data['card_text']}"
    
    await send_telegram_message(int(ADMIN_CHAT_ID), admin_text)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    client_text = f"""‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.

üìÖ <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order_data['delivery_date']} –≤ {order_data['delivery_time']}
üí∞ <b>–°—É–º–º–∞:</b> {order_data['total']:,} VND

<b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    
    await send_telegram_message(order_data['telegram_id'], client_text)

async def send_status_update(telegram_id: int, order_id: int, status: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    
    status_texts = {
        'confirmed': '‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –±—É–∫–µ—Ç–∞.',
        'making': 'üå∏ –í–∞—à –±—É–∫–µ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.',
        'delivering': 'üöö –í–∞—à –±—É–∫–µ—Ç –≤ –ø—É—Ç–∏! –ö—É—Ä—å–µ—Ä —É–∂–µ –µ–¥–µ—Ç –∫ –≤–∞–º.',
        'delivered': 'üéâ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!',
        'cancelled': '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    }
    
    text = f"""üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>

{status_texts.get(status, f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}')}"""
    
    await send_telegram_message(telegram_id, text)
