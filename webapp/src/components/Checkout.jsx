import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'

const Checkout = ({ cart, user, clearCart }) => {
  const navigate = useNavigate()
  const [formData, setFormData] = useState({
    recipient_name: '',
    contact_type: 'telegram',
    contact_value: '',
    latitude: '',
    longitude: '',
    address_text: '',
    delivery_date: '',
    delivery_time: '',
    card_text: '',
    is_anonymous: false
  })

  const [loading, setLoading] = useState(false)

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ Telegram
    if (user?.username) {
      setFormData(prev => ({
        ...prev,
        contact_value: `@${user.username}`
      }))
    }
  }, [user])

  const formatPrice = (price) => {
    return `${price.toLocaleString('vi-VN')} ‚Ç´`
  }

  const calculateTotal = () => {
    return cart.reduce((total, item) => {
      const itemTotal = item.product.price * item.quantity
      return total + itemTotal
    }, 0)
  }

  const calculateDelivery = () => {
    const total = calculateTotal()
    return total >= 1000000 ? 0 : 100000
  }

  const getTotalWithDelivery = () => {
    return calculateTotal() + calculateDelivery()
  }

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }))
  }

  const handleLocationClick = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData(prev => ({
            ...prev,
            latitude: position.coords.latitude.toString(),
            longitude: position.coords.longitude.toString()
          }))
        },
        (error) => {
          alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')
        }
      )
    } else {
      alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)

    try {
      const API_URL = import.meta.env.VITE_API_URL || 'https://your-api-url.com'
      
      const orderData = {
        telegram_id: user?.id || 0,
        telegram_username: user?.username || '',
        name: `${user?.first_name || ''} ${user?.last_name || ''}`.trim(),
        recipient_name: formData.recipient_name,
        contact_type: formData.contact_type,
        contact_value: formData.contact_value,
        latitude: formData.latitude,
        longitude: formData.longitude,
        address_text: formData.address_text,
        delivery_date: formData.delivery_date,
        delivery_time: formData.delivery_time,
        card_text: formData.card_text,
        is_anonymous: formData.is_anonymous,
        items: cart.map(item => ({
          product_id: item.product.id,
          product_name: item.product.name,
          product_photo: item.product.photo_url,
          size: item.size,
          price: item.product.price,
          quantity: item.quantity
        })),
        items_total: calculateTotal(),
        delivery_cost: calculateDelivery(),
        total: getTotalWithDelivery()
      }

      const response = await fetch(`${API_URL}/api/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
      })

      if (response.ok) {
        clearCart()
        navigate('/success')
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    } finally {
      setLoading(false)
    }
  }

  if (cart.length === 0) {
    return (
      <div className="checkout">
        <div className="empty-cart">
          <h2>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
          <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É</p>
        </div>
      </div>
    )
  }

  return (
    <div className="checkout">
      <header className="checkout-header">
        <h2>üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
      </header>

      <form onSubmit={handleSubmit} className="checkout-form">
        {/* –ü–æ–ª—É—á–∞—Ç–µ–ª—å */}
        <div className="form-group">
          <label htmlFor="recipient_name">üéÅ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è *</label>
          <input
            type="text"
            id="recipient_name"
            name="recipient_name"
            value={formData.recipient_name}
            onChange={handleInputChange}
            required
            placeholder="–ö—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ü–≤–µ—Ç—ã"
          />
        </div>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ */}
        <div className="form-group">
          <label htmlFor="contact_type">üì± –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ *</label>
          <select
            id="contact_type"
            name="contact_type"
            value={formData.contact_type}
            onChange={handleInputChange}
            required
          >
            <option value="telegram">üì± Telegram</option>
            <option value="whatsapp">üí¨ WhatsApp</option>
            <option value="zalo">üíô Zalo</option>
          </select>
          
          <input
            type="text"
            name="contact_value"
            value={formData.contact_value}
            onChange={handleInputChange}
            required
            placeholder="@username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
          />
        </div>

        {/* –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è */}
        <div className="form-group">
          <label>üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è *</label>
          <button
            type="button"
            onClick={handleLocationClick}
            className="location-btn"
          >
            üìç –ü–æ–ª—É—á–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
          </button>
          {formData.latitude && (
            <p className="location-info">
              ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {formData.latitude}, {formData.longitude}
            </p>
          )}
          
          <input
            type="text"
            name="address_text"
            value={formData.address_text}
            onChange={handleInputChange}
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
          />
        </div>

        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
        <div className="form-group">
          <label htmlFor="delivery_date">üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
          <input
            type="date"
            id="delivery_date"
            name="delivery_date"
            value={formData.delivery_date}
            onChange={handleInputChange}
            required
            min={new Date().toISOString().split('T')[0]}
          />
        </div>

        <div className="form-group">
          <label htmlFor="delivery_time">‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
          <select
            id="delivery_time"
            name="delivery_time"
            value={formData.delivery_time}
            onChange={handleInputChange}
            required
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
            <option value="09:00-12:00">09:00-12:00</option>
            <option value="12:00-15:00">12:00-15:00</option>
            <option value="15:00-18:00">15:00-18:00</option>
            <option value="18:00-21:00">18:00-21:00</option>
          </select>
        </div>

        {/* –û—Ç–∫—Ä—ã—Ç–∫–∞ */}
        <div className="form-group">
          <label htmlFor="card_text">üíå –û—Ç–∫—Ä—ã—Ç–∫–∞</label>
          <textarea
            id="card_text"
            name="card_text"
            value={formData.card_text}
            onChange={handleInputChange}
            placeholder="–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            maxLength={200}
          />
        </div>

        {/* –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å */}
        <div className="form-group checkbox-group">
          <label>
            <input
              type="checkbox"
              name="is_anonymous"
              checked={formData.is_anonymous}
              onChange={handleInputChange}
            />
            üé≠ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–∫—É—Ä—å–µ—Ä –Ω–µ —Å–∫–∞–∂–µ—Ç –æ—Ç –∫–æ–≥–æ)
          </label>
        </div>

        {/* –ò—Ç–æ–≥–æ */}
        <div className="order-summary">
          <h3>üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</h3>
          <div className="summary-row">
            <span>–¢–æ–≤–∞—Ä—ã:</span>
            <span>{formatPrice(calculateTotal())}</span>
          </div>
          <div className="summary-row">
            <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
            <span>{calculateDelivery() === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : formatPrice(calculateDelivery())}</span>
          </div>
          <div className="summary-row total">
            <span>–ò—Ç–æ–≥–æ:</span>
            <span>{formatPrice(getTotalWithDelivery())}</span>
          </div>
        </div>

        <button
          type="submit"
          disabled={loading || !formData.latitude || !formData.longitude}
          className="submit-btn"
        >
          {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
        </button>
      </form>
    </div>
  )
}

export default Checkout
