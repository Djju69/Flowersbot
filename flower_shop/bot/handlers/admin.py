"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import logging
import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os

logger = logging.getLogger(__name__)
router = Router()

API_URL = os.getenv('API_URL', 'http://localhost:8000')
ADMIN_IDS = os.getenv('ADMIN_IDS', '').split(',')

class ProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photo = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return str(user_id) in ADMIN_IDS

async def get_products():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/products") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

async def get_orders():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/api/orders") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

@router.message(F.text == "/admin")
async def admin_menu(message: Message):
    """–ê–¥–º–∏–Ω-–º–µ–Ω—é"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    logger.info(f"üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é –æ—Ç {message.from_user.id}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="admin_products")],
        [InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_products")
async def admin_products_list(callback_query: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    products = await get_products()
    
    if not products:
        await callback_query.message.edit_text(
            "üì¶ <b>–¢–æ–≤–∞—Ä—ã</b>\n\n"
            "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode='HTML'
        )
        await callback_query.answer()
        return
    
    text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"
    
    for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        text += f"üÜî {product['id']} - {product['name']}\n"
        text += f"üí∞ {product['price']:,} VND\n"
        text += f"üìÇ {product['category']}\n\n"
    
    if len(products) > 10:
        text += f"... –∏ –µ—â–µ {len(products) - 10} —Ç–æ–≤–∞—Ä–æ–≤"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback_query.answer()

@router.callback_query(F.data == "admin_orders")
async def admin_orders_list(callback_query: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    orders = await get_orders()
    
    if not orders:
        await callback_query.message.edit_text(
            "üõí <b>–ó–∞–∫–∞–∑—ã</b>\n\n"
            "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode='HTML'
        )
        await callback_query.answer()
        return
    
    text = "üõí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    
    for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        status_emoji = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'making': 'üå∏',
            'delivering': 'üöö',
            'delivered': 'üéâ',
            'cancelled': '‚ùå'
        }.get(order['status'], '‚ùì')
        
        text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
        text += f"üë§ {order['name']} - {order['phone']}\n"
        text += f"üí∞ {order['total']:,} VND\n"
        text += f"üìÖ {order['delivery_date']} –≤ {order['delivery_time']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback_query.answer()

@router.callback_query(F.data == "admin_add_product")
async def admin_add_product_start(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await state.set_state(ProductStates.waiting_for_name)
    
    await callback_query.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode='HTML'
    )
    
    await callback_query.answer()

@router.message(ProductStates.waiting_for_name)
async def process_product_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(name=message.text.strip())
    await state.set_state(ProductStates.waiting_for_category)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåπ –†–æ–∑—ã", callback_data="cat_roses")],
        [InlineKeyboardButton(text="üå∫ –≠–∫–∑–æ—Ç–∏–∫–∞", callback_data="cat_exotic")],
        [InlineKeyboardButton(text="üíê –ú–∏–∫—Å", callback_data="cat_mix")],
        [InlineKeyboardButton(text="ü§ç –ú–æ–Ω–æ", callback_data="cat_mono")]
    ])
    
    await message.answer(
        f"üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>\n\n"
        f"–¢–æ–≤–∞—Ä: {message.text.strip()}",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith("cat_"))
async def process_product_category(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"""
    category = callback_query.data.replace("cat_", "")
    
    category_names = {
        'roses': 'üåπ –†–æ–∑—ã',
        'exotic': 'üå∫ –≠–∫–∑–æ—Ç–∏–∫–∞',
        'mix': 'üíê –ú–∏–∫—Å',
        'mono': 'ü§ç –ú–æ–Ω–æ'
    }
    
    await state.update_data(category=category)
    await state.set_state(ProductStates.waiting_for_description)
    
    await callback_query.message.edit_text(
        f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_names[category]}",
        parse_mode='HTML'
    )
    
    await callback_query.answer()

@router.message(ProductStates.waiting_for_description)
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(description=message.text.strip())
    await state.set_state(ProductStates.waiting_for_price)
    
    await message.answer(
        f"üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ VND:</b>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 800000",
        parse_mode='HTML'
    )

@router.message(ProductStates.waiting_for_price)
async def process_product_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.update_data(price=price)
    await state.set_state(ProductStates.waiting_for_photo)
    
    await message.answer(
        f"üì∏ <b>–í–≤–µ–¥–∏—Ç–µ URL —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        parse_mode='HTML'
    )

@router.message(ProductStates.waiting_for_photo)
async def process_product_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    photo_url = message.text.strip()
    
    if photo_url.lower() == 'skip':
        photo_url = "https://images.unsplash.com/photo-1518895949257-7621c3c786d7?w=400"
    
    await state.update_data(photo_url=photo_url)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
    data = await state.get_data()
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/api/products", json={
                "name": data['name'],
                "category": data['category'],
                "description": data['description'],
                "price": data['price'],
                "photo_url": photo_url,
                "is_available": True,
                "is_popular": False
            }) as response:
                if response.status == 200:
                    result = await response.json()
                    await message.answer(
                        f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                        f"üÜî ID: {result['id']}\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                        f"üí∞ –¶–µ–Ω–∞: {data['price']:,} VND",
                        parse_mode='HTML'
                    )
                else:
                    await message.answer(
                        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        parse_mode='HTML'
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
    
    await state.clear()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback_query: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã", callback_data="admin_products")],
        [InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    
    await callback_query.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback_query.answer()
