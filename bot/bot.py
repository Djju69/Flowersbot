"""
Telegram Bot –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ü–≤–µ—Ç–æ–≤ "–¶–≤–µ—Ç—ã –ù—è—á–∞–Ω–≥" - –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
"""
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://flowersbot-production.up.railway.app/webapp')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∞ Mini App"""
    
    logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # Inline –∫–Ω–æ–ø–∫–∞ —Å Mini App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõç –û–¢–ö–†–´–¢–¨ –ú–ê–ì–ê–ó–ò–ù",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        "üå∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¶–≤–µ—Ç—ã –ù—è—á–∞–Ω–≥!</b>\n\n"
        "–°–≤–µ–∂–∏–µ –±—É–∫–µ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∑–∞ 1-2 —á–∞—Å–∞ üöö\n"
        "üì∏ –§–æ—Ç–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n"
        "üí≥ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±—É–∫–µ—Ç—ã:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    # Reply-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    reply_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")],
        [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ], resize_keyboard=True)
    
    await message.answer("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_kb)

@router.message(lambda message: message.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
async def shop_button(message: Message):
    """–ö–Ω–æ–ø–∫–∞ üõç –ú–∞–≥–∞–∑–∏–Ω - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Mini App"""
    logger.info(f"üõç –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç {message.from_user.id}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõç –û–¢–ö–†–´–¢–¨ –ú–ê–ì–ê–ó–ò–ù",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        "üå∏ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç—ã:",
        reply_markup=keyboard
    )

@router.message(lambda message: message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: Message):
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üì¶ –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç {message.from_user.id}")
    
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ API
    await message.answer(
        "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        "üì¶ –ó–∞–∫–∞–∑ #123\n"
        "üí∞ 1,200,000 VND\n"
        "üìÖ 15.10.2025\n"
        "–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω\n\n"
        "üì¶ –ó–∞–∫–∞–∑ #122\n"
        "üí∞ 800,000 VND\n"
        "üìÖ 10.10.2025\n"
        "–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        parse_mode='HTML'
    )


@router.message(lambda message: message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    logger.info(f"üí¨ –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç {message.from_user.id}")
    
    await message.answer(
        "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +84 XXX XXX XXX\n"
        "üìß Email: support@flowers-nhatrang.com\n"
        "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 22:00\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!",
        parse_mode='HTML'
    )

@router.message(lambda message: message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
async def repeat_last_order(message: Message):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑"""
    logger.info(f"üîÅ –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç {message.from_user.id}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõç –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑ #123",
            web_app=WebAppInfo(url=f"{WEBAPP_URL}?repeat=123")
        )]
    ])
    
    await message.answer(
        "üîÅ <b>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑</b>\n\n"
        "üì¶ –ó–∞–∫–∞–∑ #123\n"
        "üåπ –†–æ–∑—ã –ø—Ä–µ–º–∏—É–º\n"
        "üí∞ 1,200,000 VND\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_all_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=BOT_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
        dp.include_router(router)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Railway
        webhook_path = "/webhook"
        port = int(os.getenv("PORT", 8000))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω Railway –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        railway_domain = os.getenv("RAILWAY_PUBLIC_DOMAIN")
        if railway_domain:
            webhook_url = f"https://{railway_domain}{webhook_path}"
        else:
            webhook_url = os.getenv("WEBHOOK_URL", f"https://your-domain.railway.app{webhook_path}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        logger.info(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        try:
            webhook_info = await bot.get_webhook_info()
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π webhook: {webhook_info.url}")
            
            if webhook_info.url != webhook_url:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º webhook —Å {webhook_info.url} –Ω–∞ {webhook_url}")
                await bot.set_webhook(webhook_url)
                logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.info("‚úÖ Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            raise
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
        from aiohttp import web
        
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint –¥–ª—è Railway
        async def health_check(request):
            return web.Response(text="OK", status=200)
        
        app.router.add_get("/health", health_check)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
        async def test_webhook(request):
            webhook_info = await bot.get_webhook_info()
            return web.Response(
                text=f"Webhook URL: {webhook_info.url}\nPending updates: {webhook_info.pending_update_count}",
                status=200
            )
        
        app.router.add_get("/test-webhook", test_webhook)
        
        # Webhook endpoint
        async def webhook_handler(request):
            try:
                data = await request.json()
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data.get('update_id', 'unknown')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
                if 'update_id' not in data:
                    logger.warning("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
                    return web.Response(text="INVALID", status=400)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dict –≤ –æ–±—ä–µ–∫—Ç Update
                from aiogram.types import Update
                update = Update(**data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await dp.feed_update(bot, update)
                logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return web.Response(text="OK")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook handler: {e}")
                import traceback
                logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
                return web.Response(text="ERROR", status=500)
        
        app.router.add_post(webhook_path, webhook_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        
        logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if 'bot' in locals():
            await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
