#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Backend API –∏ Bot –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ Railway
"""
import asyncio
import subprocess
import os
import sys
import logging
import signal
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def signal_handler(signum, frame):
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

async def start_backend():
    """–ó–∞–ø—É—Å–∫ Backend API"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Backend API...")
    process = subprocess.Popen([
        sys.executable, "-m", "uvicorn", 
        "main:app", 
        "--host", "0.0.0.0", 
        "--port", os.getenv("PORT", "8000")
    ], cwd="flower_shop/backend")
    return process

async def start_bot():
    """–ó–∞–ø—É—Å–∫ Bot"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Bot...")
    process = subprocess.Popen([
        sys.executable, "bot.py"
    ], cwd="flower_shop/bot")
    return process

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        logger.info("üå∏ –ó–∞–ø—É—Å–∫ –¶–≤–µ—Ç—ã –ù—è—á–∞–Ω–≥ –Ω–∞ Railway...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Backend
        backend_process = await start_backend()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã Backend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        await asyncio.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Bot
        bot_process = await start_bot()
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        logger.info(f"üåê Backend API: http://0.0.0.0:{os.getenv('PORT', '8000')}")
        logger.info("ü§ñ Bot: webhook –∞–∫—Ç–∏–≤–µ–Ω")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            if backend_process.poll() is not None:
                logger.error("‚ùå Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!")
                break
            if bot_process.poll() is not None:
                logger.error("‚ùå Bot –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!")
                break
            await asyncio.sleep(1)
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        backend_process.terminate()
        bot_process.terminate()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        if 'backend_process' in locals():
            backend_process.terminate()
        if 'bot_process' in locals():
            bot_process.terminate()

if __name__ == "__main__":
    asyncio.run(main())
