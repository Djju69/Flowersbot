import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { formatVNDSimple, calculateItemPrice, calculateCartTotal, calculateDeliveryCost } from '../utils/format';

function Checkout({ cart, user, telegram, clearCart }) {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    phone: '',
    address: '',
    latitude: '',
    longitude: '',
    delivery_date: '',
    delivery_time: '',
    card_text: '',
    is_anonymous: false,
  });
  const [errors, setErrors] = useState({});
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é
    const today = new Date().toISOString().split('T')[0];
    setFormData(prev => ({
      ...prev,
      delivery_date: today
    }));
  }, []);

  const itemsTotal = calculateCartTotal(cart);
  const deliveryCost = calculateDeliveryCost(itemsTotal);
  const total = itemsTotal + deliveryCost;

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.phone.trim()) newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.address.trim()) newErrors.address = '–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.delivery_date) newErrors.delivery_date = '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    if (!formData.delivery_time) newErrors.delivery_time = '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleGeolocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData(prev => ({
            ...prev,
            latitude: position.coords.latitude.toString(),
            longitude: position.coords.longitude.toString(),
          }));
          setErrors(prev => ({ ...prev, geolocation: '' }));
        },
        (error) => {
          console.error("Error getting geolocation:", error);
          setErrors(prev => ({ ...prev, geolocation: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.' }));
        }
      );
    } else {
      setErrors(prev => ({ ...prev, geolocation: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º.' }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
      return;
    }

    setSubmitting(true);
    try {
      const orderItems = cart.map(item => ({
        product_id: item.product.id,
        product_name: item.product.name,
        size: item.size,
        price: calculateItemPrice(item.product.price, item.size),
        quantity: item.quantity,
      }));

      const orderData = {
        telegram_id: user?.id || 0,
        telegram_username: user?.username,
        name: user?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: formData.phone,
        address: formData.address,
        latitude: formData.latitude,
        longitude: formData.longitude,
        delivery_date: formData.delivery_date,
        delivery_time: formData.delivery_time,
        card_text: formData.card_text,
        is_anonymous: formData.is_anonymous,
        items: orderItems,
        items_total: itemsTotal,
        delivery_cost: deliveryCost,
        total: total,
      };

      const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8000';
      const response = await fetch(`${apiUrl}/api/orders`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('Order created:', result);
      clearCart();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º Mini App
      if (telegram) {
        telegram.close();
      } else {
        navigate('/success');
      }
    } catch (e) {
      console.error('Error creating order:', e);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${e.message}`);
    } finally {
      setSubmitting(false);
    }
  };

  if (cart.length === 0) {
    return (
      <div className="checkout">
        <h2>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
        <p>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.</p>
        <button onClick={() => navigate('/')} className="button primary">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥</button>
      </div>
    );
  }

  return (
    <div className="checkout">
      <h2>üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–¢–µ–ª–µ—Ñ–æ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
          <input 
            type="tel" 
            name="phone" 
            value={formData.phone} 
            onChange={handleChange} 
            placeholder="+84 XXX XXX XXX"
            className={errors.phone ? 'input-error' : ''}
          />
          {errors.phone && <p className="error-message">{errors.phone}</p>}
        </div>

        <div className="form-group">
          <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
          <textarea 
            name="address" 
            value={formData.address} 
            onChange={handleChange} 
            rows="3"
            placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, —Ä–∞–π–æ–Ω, –≥–æ—Ä–æ–¥"
            className={errors.address ? 'input-error' : ''}
          ></textarea>
          {errors.address && <p className="error-message">{errors.address}</p>}
        </div>

        <div className="form-group">
          <label>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</label>
          <button type="button" onClick={handleGeolocation} className="button secondary">
            {formData.latitude && formData.longitude ? 'üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞' : 'üìç –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'}
          </button>
          {formData.latitude && formData.longitude && (
            <p className="success-message">–®–∏—Ä–æ—Ç–∞: {formData.latitude}, –î–æ–ª–≥–æ—Ç–∞: {formData.longitude}</p>
          )}
          {errors.geolocation && <p className="error-message">{errors.geolocation}</p>}
        </div>

        <div className="form-group">
          <label>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
          <input 
            type="date" 
            name="delivery_date" 
            value={formData.delivery_date} 
            onChange={handleChange} 
            min={new Date().toISOString().split('T')[0]}
            className={errors.delivery_date ? 'input-error' : ''}
          />
          {errors.delivery_date && <p className="error-message">{errors.delivery_date}</p>}
        </div>

        <div className="form-group">
          <label>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
          <select 
            name="delivery_time" 
            value={formData.delivery_time} 
            onChange={handleChange}
            className={errors.delivery_time ? 'input-error' : ''}
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
            <option value="09:00-12:00">09:00-12:00</option>
            <option value="12:00-15:00">12:00-15:00</option>
            <option value="15:00-18:00">15:00-18:00</option>
            <option value="18:00-21:00">18:00-21:00</option>
          </select>
          {errors.delivery_time && <p className="error-message">{errors.delivery_time}</p>}
        </div>

        <div className="form-group">
          <label>–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
          <textarea 
            name="card_text" 
            value={formData.card_text} 
            onChange={handleChange} 
            rows="3"
            maxLength="200"
            placeholder="–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–∂–µ–ª–∞–Ω–∏–µ..."
          ></textarea>
        </div>

        <div className="form-group checkbox-group">
          <input 
            type="checkbox" 
            name="is_anonymous" 
            checked={formData.is_anonymous} 
            onChange={handleChange} 
            id="is_anonymous"
          />
          <label htmlFor="is_anonymous">–ê–Ω–æ–Ω–∏–º–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</label>
        </div>

        <div className="order-summary">
          <h3>–í–∞—à –∑–∞–∫–∞–∑:</h3>
          {cart.map(item => (
            <p key={`${item.product.id}-${item.size}`}>
              {item.product.name} ({item.size === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç' : item.size === 'large' ? '–ë–æ–ª—å—à–æ–π' : 'XL'}) x {item.quantity} - {formatVNDSimple(calculateItemPrice(item.product.price, item.size) * item.quantity)}
            </p>
          ))}
          <p>–î–æ—Å—Ç–∞–≤–∫–∞: {deliveryCost === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : formatVNDSimple(deliveryCost)}</p>
          <h4>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {formatVNDSimple(total)}</h4>
        </div>

        <button type="submit" className="button primary" disabled={submitting}>
          {submitting ? '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...' : '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å'}
        </button>
        <button type="button" onClick={() => navigate('/cart')} className="button secondary">
          ‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
        </button>
      </form>
    </div>
  );
}

export default Checkout;
